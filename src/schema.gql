# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AppointmentModel {
  color: String!
  customer: Customer!
  date: DateTime
  description: String!
  emailOwner: String
  image: String!
  randomUser: String
  slug: String!
  title: String!
  tokenPage: String
}

input CreateAppointmentInput {
  color: String!
  description: String!
  image: String!
  slug: String!
  title: String!
  tokenOwner: String!
}

input CreateDataUserInput {
  currentDateTime: String
  geoLocation: GeoLocationInput
  ip: String
  randomUser: String!
  screenshot: String
  screenshot2: String
  screenshot3: String
  slug: String!
  tokenPage: String!
  userAgent: String
  video: VideoInput
}

input CreateUserClientInput {
  email: String!
  name: String!
  password: String!
}

type Customer {
  name: String!
}

type DataUserClientModel {
  email: String!
  name: String!
  user_credits: Float!
}

type DataUserModel {
  currentDateTime: String!
  emailOwner: String!
  geoLocation: GeoLocation
  id: String!
  ip: String!
  randomUser: String!
  screenshot: String
  screenshot2: String
  screenshot3: String
  slug: String!
  tokenPage: String!
  userAgent: String
  video: Video
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type GeoLocation {
  latitude: Float
  longitude: Float
}

input GeoLocationInput {
  latitude: Float
  longitude: Float
}

input LoginUserClientInput {
  email: String!
  password: String!
}

type Mutation {
  CreateUserClient(data: CreateUserClientInput!): Token!
  LoginUserClient(data: LoginUserClientInput!): Token!
  VerifyToken(token: String!): Boolean!
  createAppointment(data: CreateAppointmentInput!): AppointmentModel!
  createDataUser(data: CreateDataUserInput!): DataUserModel!
  updateDataUser(data: UpdateDataUserInput!): DataUserModel!
}

type Query {
  DataUserClient(token: String!): DataUserClientModel!
  appointments(tokenPage: String!): AppointmentModel!
  appointmentsAll: [AppointmentModel!]!
  appointmentsByUser(tokenOwner: String!): [AppointmentModel!]!
  dataUser(randomUser: String!, tokenPage: String!): [DataUserModel!]!
}

type Token {
  token: String!
}

input UpdateDataUserInput {
  currentDateTime: String
  geoLocation: GeoLocationInput
  id: String!
  ip: String
  screenshot: String
  screenshot2: String
  screenshot3: String
  slug: String
  userAgent: String
  video: VideoInput
}

type Video {
  url: String
}

input VideoInput {
  url: String
}
